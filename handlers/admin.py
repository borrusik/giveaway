from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timedelta

from services.draw_manager import create_draw, get_active_draws, get_draw_details, end_draw, cancel_draw
from config import ADMIN_IDS, CHANNEL_ID
from instance import bot

# Initialize router
router = Router()

@router.message(Command("newdraw"), F.from_user.id.in_(ADMIN_IDS))
async def cmd_new_draw(message: Message):
    """Handle /newdraw command - create a new draw"""
    # Parse command arguments: /newdraw [name] [prize] [days]
    parts = message.text.split(maxsplit=3)
    
    name = "–†–æ–∑—ñ–≥—Ä–∞—à"
    prize = "–ü—Ä–∏–∑"
    days = 7
    
    # Get arguments if provided
    if len(parts) >= 2:
        name = parts[1]
    if len(parts) >= 3:
        prize = parts[2]
    if len(parts) >= 4:
        try:
            days = int(parts[3])
        except ValueError:
            pass
    
    # Create the draw
    result = await create_draw(name, prize, days)
    
    # Format the response
    end_date = result["end_date"].strftime("%d.%m.%Y %H:%M")
    
    await message.answer(
        f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à!\n\n"
        f"üèÜ –ù–∞–∑–≤–∞: <b>{result['name']}</b>\n"
        f"üéÅ –ü—Ä–∏–∑: <b>{result['prize']}</b>\n"
        f"üìÖ –î–∞—Ç–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è: <b>{end_date}</b> (—á–µ—Ä–µ–∑ {days} –¥–Ω—ñ–≤)\n\n"
        f"ID —Ä–æ–∑—ñ–≥—Ä–∞—à—É: <code>{result['id']}</code>"
    )
    
    # Announce in the channel
    try:
        await bot.send_message(
            CHANNEL_ID,
            f"üéâ <b>–ù–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à —Ä–æ–∑–ø–æ—á–∞—Ç–æ!</b>\n\n"
            f"üèÜ {result['name']}\n"
            f"üéÅ –ü—Ä–∏–∑: <b>{result['prize']}</b>\n"
            f"üìÖ –†–æ–∑—ñ–≥—Ä–∞—à –∑–∞–∫—ñ–Ω—á–∏—Ç—å—Å—è: <b>{end_date}</b>\n\n"
            f"–ó–∞–ø—Ä–æ—à—É–π—Ç–µ –¥—Ä—É–∑—ñ–≤ —Ç–∞ –∑–±—ñ–ª—å—à—É–π—Ç–µ —Å–≤–æ—ó —à–∞–Ω—Å–∏ –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É! /start"
        )
    except Exception as e:
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª: {str(e)}")

@router.message(Command("draws"), F.from_user.id.in_(ADMIN_IDS))
async def cmd_list_draws(message: Message):
    """Handle /draws command - list active draws"""
    draws = await get_active_draws()
    
    if not draws:
        await message.answer("–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤.")
        return
    
    # Build response
    response = "<b>üìã –ê–∫—Ç–∏–≤–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ:</b>\n\n"
    
    for draw in draws:
        end_date = draw["end_date"].strftime("%d.%m.%Y %H:%M") if draw["end_date"] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        days_left = f"{draw['days_left']} –¥–Ω—ñ–≤" if draw["days_left"] is not None else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        
        response += (
            f"üÜî <code>{draw['id']}</code>\n"
            f"üèÜ <b>{draw['name']}</b>\n"
            f"üéÅ –ü—Ä–∏–∑: {draw['prize']}\n"
            f"‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {days_left}\n"
            f"üìÖ –ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è: {end_date}\n\n"
        )
    
    # Add inline keyboard for actions
    builder = InlineKeyboardBuilder()
    
    for draw in draws:
        builder.button(
            text=f"–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ #{draw['id']}", 
            callback_data=f"end_draw:{draw['id']}"
        )
    
    for draw in draws:
        builder.button(
            text=f"–°–∫–∞—Å—É–≤–∞—Ç–∏ #{draw['id']}", 
            callback_data=f"cancel_draw:{draw['id']}"
        )
    
    # Adjust grid layout
    builder.adjust(1)
    
    await message.answer(response, reply_markup=builder.as_markup())

@router.callback_query(F.data.startswith("end_draw:"))
async def callback_end_draw(callback: CallbackQuery):
    """Handle callback to end a draw"""
    # Check if user is admin
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return
    
    # Get the draw ID from callback data
    draw_id = int(callback.data.split(":")[1])
    
    # Show "processing" message
    await callback.answer("–ü—Ä–æ–≤–æ–¥–∏–º–æ —Ä–æ–∑—ñ–≥—Ä–∞—à —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤...")
    
    # End the draw
    result = await end_draw(draw_id)
    
    if not result:
        await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à.")
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π.")
        return
    
    # Format winner announcement
    if "message" in result:
        # No eligible participants
        await callback.message.answer(
            f"‚ÑπÔ∏è –†–æ–∑—ñ–≥—Ä–∞—à #{draw_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∞–ª–µ {result['message'].lower()}."
        )
        return
    
    win_chance_formatted = f"{result['win_chance']:.2f}%"
    
    # Include eligibility stats
    eligibility_info = ""
    if "eligible_users_count" in result and "total_users_count" in result:
        eligibility_info = f"üë• –£—á–∞—Å–Ω–∏–∫—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É: <b>{result['eligible_users_count']}</b> –∑ {result['total_users_count']} (–∞–∫—Ç–∏–≤–Ω—ñ —É—á–∞—Å–Ω–∏–∫–∏ –∫–∞–Ω–∞–ª—É)\n"
    
    winner_text = (
        f"üéâ <b>–†–æ–∑—ñ–≥—Ä–∞—à –∑–∞–≤–µ—Ä—à–µ–Ω–æ!</b>\n\n"
        f"üèÜ –†–æ–∑—ñ–≥—Ä–∞—à: <b>{result['draw_name']}</b>\n"
        f"{eligibility_info}"
        f"üëë –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: "
        f"{'@' + result['winner_username'] if result['winner_username'] else '–£—á–∞—Å–Ω–∏–∫'}\n"
        f"üÜî ID: <code>{result['winner_id']}</code>\n"
        f"üéü –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤: <b>{result['winner_tickets']}</b>\n"
        f"üéØ –®–∞–Ω—Å –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É: <b>{win_chance_formatted}</b>\n"
        f"üèÜ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤: <b>{result['total_tickets']}</b>\n\n"
        f"üéÅ –ü—Ä–∏–∑: <b>{result['prize']}</b>"
    )
    
    # Send winner announcement to admin
    await callback.message.answer(winner_text)
    
    # Send winner announcement to channel (without eligibility info)
    try:
        channel_text = winner_text.replace(eligibility_info, "")  # Remove eligibility stats for channel announcement
        await bot.send_message(CHANNEL_ID, channel_text)
    except Exception as e:
        await callback.message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª: {str(e)}")

@router.callback_query(F.data.startswith("cancel_draw:"))
async def callback_cancel_draw(callback: CallbackQuery):
    """Handle callback to cancel a draw"""
    # Check if user is admin
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.")
        return
    
    # Get the draw ID from callback data
    draw_id = int(callback.data.split(":")[1])
    
    # Cancel the draw
    success = await cancel_draw(draw_id)
    
    if not success:
        await callback.answer("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à.")
        await callback.message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ä–æ–∑—ñ–≥—Ä–∞—à –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π.")
        return
    
    await callback.answer("–†–æ–∑—ñ–≥—Ä–∞—à —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ!")
    await callback.message.answer(f"‚ùå –†–æ–∑—ñ–≥—Ä–∞—à #{draw_id} —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    
    # Announce in the channel
    try:
        draw_details = await get_draw_details(draw_id)
        if draw_details:
            await bot.send_message(
                CHANNEL_ID,
                f"‚ùå <b>–†–æ–∑—ñ–≥—Ä–∞—à '{draw_details['name']}' —Å–∫–∞—Å–æ–≤–∞–Ω–æ.</b>\n\n"
                f"–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –±—É–¥–µ –æ–≥–æ–ª–æ—à–µ–Ω–æ –Ω–µ–∑–∞–±–∞—Ä–æ–º!"
            )
    except Exception as e:
        await callback.message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª: {str(e)}")

@router.message(Command("draw"), F.from_user.id.in_(ADMIN_IDS))
async def cmd_draw(message: Message):
    """Handle /draw command - manual draw (legacy support)"""
    # Parse command arguments
    args = message.text.split()[1:] if len(message.text.split()) > 1 else []
    prize = " ".join(args) if args else "–ü—Ä–∏–∑"
    
    # Create draw and immediately end it
    draw_result = await create_draw("–ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à", prize, 0)
    result = await end_draw(draw_result["id"])
    
    if not result or "message" in result:
        await message.answer("–ù–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤ –∑ –∫–≤–∏—Ç–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É.")
        return
    
    # Format winner announcement
    win_chance_formatted = f"{result['win_chance']:.2f}%"
    
    winner_text = (
        f"üéâ <b>–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å —Ä–æ–∑—ñ–≥—Ä–∞—à—É</b>: "
        f"{'@' + result['winner_username'] if result['winner_username'] else '–£—á–∞—Å–Ω–∏–∫'}\n"
        f"üÜî ID: <code>{result['winner_id']}</code>\n"
        f"üéü –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤: <b>{result['winner_tickets']}</b>\n"
        f"üéØ –®–∞–Ω—Å –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É: <b>{win_chance_formatted}</b>\n"
        f"üèÜ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤: <b>{result['total_tickets']}</b>\n\n"
        f"üéÅ –ü—Ä–∏–∑: <b>{result['prize']}</b>"
    )
    
    # Send winner announcement to admin
    await message.answer(winner_text)
    
    # Send winner announcement to channel
    try:
        await bot.send_message(CHANNEL_ID, winner_text)
    except Exception as e:
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª: {str(e)}")

@router.message(Command("verify"), F.from_user.id.in_(ADMIN_IDS))
async def cmd_verify_members(message: Message):
    """Handle /verify command - check channel membership of all users with tickets"""
    # Notify admin that this might take some time
    processing_msg = await message.answer("‚è≥ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å.")
    
    session = get_session()
    
    # Get all users with tickets
    users_with_tickets = session.query(User).filter(User.ticket_count > 0).all()
    
    if not users_with_tickets:
        await processing_msg.edit_text("–í –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –Ω–µ–º–∞—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –∫–≤–∏—Ç–∫–∞–º–∏.")
        return
    
    # Check channel membership for each user
    total_users = len(users_with_tickets)
    active_members = 0
    non_members = 0
    
    for user in users_with_tickets:
        is_member = await check_channel_membership(user.id)
        if is_member:
            active_members += 1
        else:
            non_members += 1
    
    # Prepare report
    report = (
        f"üìä <b>–ó–≤—ñ—Ç –ø—Ä–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤:</b>\n\n"
        f"üë• –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –∫–≤–∏—Ç–∫–∞–º–∏: <b>{total_users}</b>\n"
        f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ñ —É—á–∞—Å–Ω–∏–∫–∏ –∫–∞–Ω–∞–ª—É: <b>{active_members}</b>\n"
        f"‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ñ (–≤–∏–π—à–ª–∏ –∑ –∫–∞–Ω–∞–ª—É): <b>{non_members}</b>\n\n"
        f"üìä –í—ñ–¥—Å–æ—Ç–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö —É—á–∞—Å–Ω–∏–∫—ñ–≤: <b>{active_members/total_users*100:.2f}%</b>"
    )
    
    await processing_msg.edit_text(report)