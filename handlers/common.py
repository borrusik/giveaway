from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext

from db.database import get_session
from db.models import User
from services.referral import generate_referral_code, create_referral_link, process_referral, get_referral_stats
from config import CHANNEL_ID, CHANNEL_USERNAME
from instance import bot

# Initialize router
router = Router()

@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """Handle /start command"""
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    
    # Check if user exists in DB
    session = get_session()
    user = session.query(User).filter(User.id == user_id).first()
    
    # If user doesn't exist, create new user
    if not user:
        referral_code = generate_referral_code()
        user = User(
            id=user_id,
            username=username,
            first_name=first_name,
            last_name=last_name,
            referral_code=referral_code
        )
        session.add(user)
        session.commit()
    
    # Check if start has referral code
    args = message.text.split()[1] if len(message.text.split()) > 1 else None
    if args:
        # Find user who shared the link
        referrer = session.query(User).filter(User.referral_code == args).first()
        
        if referrer and referrer.id != user_id:
            # First, check if the user has joined the channel
            try:
                member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
                status = member.status
                if isinstance(status, str):
                    member_status = status
                else:
                    member_status = status.value
                
                # Only process referral if user has joined the channel
                if member_status not in ['left', 'kicked', 'restricted']:
                    # Process the referral if it's valid
                    user.referred_by_id = referrer.id
                    session.commit()
                    
                    # Update referrer's tickets
                    await process_referral(referrer.id, user_id)
                    
                    await message.answer(
                        f"–í—ñ—Ç–∞—î–º–æ! –í–∏ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –∑–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID: {referrer.id}\n"
                        f"–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—à—É–≤–∞—Ç–∏ –¥—Ä—É–∑—ñ–≤ —ñ –∑–±—ñ–ª—å—à—É–≤–∞—Ç–∏ —Å–≤–æ—ó —à–∞–Ω—Å–∏ –Ω–∞ –≤–∏–≥—Ä–∞—à!"
                    )
                else:
                    # User hasn't joined the channel yet
                    invite_link = await bot.export_chat_invite_link(CHANNEL_ID)
                    await message.answer(
                        f"–©–æ–± –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É—Ç–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º –Ω–∞ –∫–∞–Ω–∞–ª.\n"
                        f"–ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {invite_link}\n"
                        f"–ü—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start {args} –∑–Ω–æ–≤—É."
                    )
                    return
            except Exception as e:
                print(f"Error checking channel membership: {e}")
                await message.answer("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
                return
        else:
            await message.answer("–í—ñ—Ç–∞—î–º–æ –≤ –Ω–∞—à–æ–º—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ! –ó–∞–ø—Ä–æ—à—É–π—Ç–µ –¥—Ä—É–∑—ñ–≤ —Ç–∞ –≤–∏–≥—Ä–∞–≤–∞–π—Ç–µ –ø—Ä–∏–∑–∏!")
    else:
        # Check if user is in the channel
        try:
            member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
            status = member.status
            if isinstance(status, str):
                member_status = status
            else:
                member_status = status.value
                
            if member_status in ['left', 'kicked', 'restricted']:
                # User hasn't joined the channel yet
                invite_link = await bot.export_chat_invite_link(CHANNEL_ID)
                await message.answer(
                    f"–©–æ–± –±—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ, –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É—Ç–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω–∏–º –Ω–∞ –∫–∞–Ω–∞–ª.\n"
                    f"–ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: {invite_link}\n"
                    f"–ü—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start –∑–Ω–æ–≤—É."
                )
                return
        except Exception as e:
            print(f"Error checking channel membership: {e}")
    
    # Generate and send the referral link - this creates a link to the BOT with start parameter
    referral_link = create_referral_link(user_id)
    
    await message.answer(
        f"–í—ñ—Ç–∞—î–º–æ –≤ –Ω–∞—à–æ–º—É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ!\n\n"
        f"–í–∞—à–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –¥—Ä—É–∑—ñ–≤:\n"
        f"<code>{referral_link}</code>\n\n"
        f"–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Ü–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –∑ –¥—Ä—É–∑—è–º–∏. –ó–∞ –∫–æ–∂–Ω–æ–≥–æ –¥—Ä—É–≥–∞, —è–∫–∏–π –ø—Ä–∏—î–¥–Ω–∞—î—Ç—å—Å—è –¥–æ –∫–∞–Ω–∞–ª—É —á–µ—Ä–µ–∑ –≤–∞—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –æ–¥–∏–Ω –∫–≤–∏—Ç–æ–∫ –¥–ª—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É!\n\n"
        f"–î—Ä—É–≥ –º–∞—î:\n"
        f"1. –ü–µ—Ä–µ–π—Ç–∏ –∑–∞ –≤–∞—à–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º\n"
        f"2. –ù–∞—Ç–∏—Å–Ω—É—Ç–∏ START –≤ –±–æ—Ç—ñ\n" 
        f"3. –ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è –Ω–∞ –∫–∞–Ω–∞–ª: https://t.me/{CHANNEL_USERNAME}\n\n"
        f"–¢—ñ–ª—å–∫–∏ —Ç–æ–¥—ñ –≤–∞–º –±—É–¥–µ –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è!"
    )

@router.message(Command("me"))
async def cmd_me(message: Message):
    """Handle /me command - show user's statistics"""
    user_id = message.from_user.id
    stats = get_referral_stats(user_id)
    
    if not stats:
        await message.answer("–í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ —É —Å–∏—Å—Ç–µ–º—ñ. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        return
    
    await message.answer(
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n"
        f"üéü –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤: <b>{stats['tickets']}</b>\n"
        f"üë• –ó–∞–ø—Ä–æ—à–µ–Ω–æ –¥—Ä—É–∑—ñ–≤: <b>{stats['referrals_count']}</b>\n"
        f"üéØ –í–∞—à —à–∞–Ω—Å –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É: <b>{stats['win_chance']}%</b>\n"
        f"üèÜ –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤ —É —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ: <b>{stats['total_tickets']}</b>"
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """Handle /help command"""
    help_text = (
        f"<b>üì± Invite2Win Bot - –†–æ–∑—ñ–≥—Ä–∞—à –∑–∞ –¥—Ä—É–∑—ñ–≤</b>\n\n"
        f"üîπ <b>/start</b> ‚Äî –ø–æ—á–∞—Ç–∏ —É—á–∞—Å—Ç—å —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è\n"
        f"üîπ <b>/me</b> ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n"
        f"üîπ <b>/top</b> ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ª—ñ–¥–µ—Ä—ñ–≤ –∑–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è–º–∏\n"
        f"üîπ <b>/help</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É\n\n"
        f"üìä <b>–Ø–∫ –ø—Ä–∞—Ü—é—î —Ä–æ–∑—ñ–≥—Ä–∞—à?</b>\n"
        f"1. –ó–∞–ø—Ä–æ—à—É–π—Ç–µ –¥—Ä—É–∑—ñ–≤ –∑–∞ –≤–∞—à–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–º –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º\n"
        f"2. –ó–∞ –∫–æ–∂–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ 1 –∫–≤–∏—Ç–æ–∫\n"
        f"3. –ß–∏–º –±—ñ–ª—å—à–µ –∫–≤–∏—Ç–∫—ñ–≤ ‚Äî —Ç–∏–º –±—ñ–ª—å—à–∏–π —à–∞–Ω—Å –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É\n"
        f"4. –ü–µ—Ä–µ–º–æ–∂–µ—Ü—å –æ–±–∏—Ä–∞—î—Ç—å—Å—è –≤–∏–ø–∞–¥–∫–æ–≤–æ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –≤–∞–≥–∏ –∫–≤–∏—Ç–∫—ñ–≤\n\n"
        f"–ü—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: https://t.me/{CHANNEL_USERNAME}"
    )
    
    await message.answer(help_text)

from services.draw_manager import get_active_draws

@router.message(Command("draws"))
async def cmd_user_draws(message: Message):
    """Handle /draws command - show active draws for users"""
    draws = await get_active_draws()
    
    if not draws:
        await message.answer("–ù–∞ –¥–∞–Ω–∏–π –º–æ–º–µ–Ω—Ç –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤.")
        return
    
    # Build response
    response = "<b>üéÆ –ê–∫—Ç–∏–≤–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ:</b>\n\n"
    
    for draw in draws:
        end_date = draw["end_date"].strftime("%d.%m.%Y %H:%M") if draw["end_date"] else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        days_left = f"{draw['days_left']} –¥–Ω—ñ–≤" if draw["days_left"] is not None else "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
        
        response += (
            f"üèÜ <b>{draw['name']}</b>\n"
            f"üéÅ –ü—Ä–∏–∑: {draw['prize']}\n"
            f"‚è≥ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {days_left}\n"
            f"üìÖ –ó–∞–∫—ñ–Ω—á–µ–Ω–Ω—è: {end_date}\n\n"
        )
    
    response += "–ó–∞–ø—Ä–æ—à—É–π—Ç–µ –¥—Ä—É–∑—ñ–≤, —â–æ–± –∑–±—ñ–ª—å—à–∏—Ç–∏ —Å–≤–æ—ó —à–∞–Ω—Å–∏ –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /me –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Å–≤–æ—î—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
    
    await message.answer(response)


from aiogram.types import CallbackQuery
@router.callback_query(lambda c: c.data == "check_join")
async def check_join_callback(callback: CallbackQuery):
    is_member = await check_channel_membership(callback.from_user.id)
    if is_member:
        await callback.message.edit_text("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")
    else:
        await callback.answer("–í—ã –≤—Å—ë –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)